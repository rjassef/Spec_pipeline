#!/usr/bin/env python

import numpy as np
from astropy.io import fits
import astropy.units as u
from astropy.constants import h,c
import re
import os

from .spectrum1d import read_fits_spectrum1d
from .Spec import Spec
from .rebin_spec import rebin_spec

#As there are too many different things to keep in minds, we'll load
#the spectra as objects, so we can load the appropiate sensitivity
#curves and sky spectra without having to think too much about it
#during the code execution.

class DEIMOS_Spec(Spec):

    """
Module that read a DEIMOS spectrum and returns a spec object.

Args:
   _name (string)    : Object name or ID.

   _zspec (float)    : Spectroscopic redshift.

   _fits_files (list): Spectrum file name. Has to be a one element list.

   """

    def __init__(self,_name,_zspec,_fits_files,show_err_plot=False):
        super(DEIMOS_Spec,self).__init__(_name,_zspec,_fits_files,show_err_plot=show_err_plot)
        self.RT   = 5.0*u.m #Telescope radius.
        self.instrument = "DEIMOS"
        self.__flam
        self.__flam_sky
        self.__sens


    @property
    def __flam(self):

        ff = fits.open(self.data_prefix+"/"+self.fits_files[0])
        spec = read_fits_spectrum1d(self.data_prefix+"/"+self.fits_files[0],
                                    dispersion_unit=u.AA,
                                    flux_unit = u.erg/(u.cm**2*u.s*u.Hz))
        self.lam_obs = spec[0].dispersion
        fnu = spec[0].data * spec[0].unit

        self.dlam = np.mean(self.lam_obs[1:]-self.lam_obs[:-1])#Mean lambda bin.
        self.texp = ff[0].header['EXPTIME']*u.s

        #Web page says a maximum of 2.64e - https://www2.keck.hawaii.edu/inst/deimos/deimos_detector_data.html
        self.RON  = 2.64

        self.spec_err_name = "error."+self.fits_files[0]
        self.spec_err_name = re.sub(".fits",".txt",self.spec_err_name)

        self.flam = (fnu*c/self.lam_obs**2).to(u.erg/(u.cm**2*u.s*u.AA))
        return

    #While we don't have the correct sky template, we'll use the one from GMOS.
    @property
    def __flam_sky(self):

        #Read the template
        sky_temp = np.loadtxt(os.environ['SPEC_PIPE_LOC']+\
                              "/Spec_pipeline/Sky_Templates/template_sky_GMOS.dat")
        lam_sky = sky_temp[:,0]*u.AA
        flam_sky_orig = sky_temp[:,1]*u.erg/(u.s*u.cm**2*u.AA)

        #Rebin the template to the object spectrum.
        self.flam_sky = rebin_spec(lam_sky, flam_sky_orig, self.lam_obs)

        return

    #There is only one sensitivity curve that we use.
    @property
    def __sens(self):

        #Read the sensitivity curve.
        sens_temp = np.loadtxt(os.environ['SPEC_PIPE_LOC']+\
                               "/Spec_pipeline/Sensitivity_Files/"+
                               "Sens_DEIMOS.txt")
        lam_sens = sens_temp[:,0]*u.AA
        sens_orig = sens_temp[:,1]*u.dimensionless_unscaled

        #Rebin the template to the object spectrum.
        self.sens = rebin_spec(lam_sens, sens_orig, self.lam_obs)

        return

    #Taken from https://www2.keck.hawaii.edu/inst/deimos/gratings.html. We'll assume a 1" slit with the 600ZD grating.
    @property
    def sigma_res(self):
        FWHM_res = 3.5*u.AA * 1./0.75
        sigma_res = FWHM_res/(2.*(2.*np.log(2.))**0.5)
        return sigma_res
